*debugger-DBGp.txt*

	    --------------------
	    Debugger-DBGp Manual
	    --------------------

This python script provides a debugger interface to the DBGp protocol.

==============================================================================
1. Contents		    				*debugger-DBGp-contents* {{{1

1.  Contents..........................................|debugger-DBGp-contents|
2.  Installation..................................|debugger-DBGp-installation|
3.  Usage................................................|debugger-DBGp-usage|
4.  Notes................................................|debugger-DBGp-notes|
5.  Todos................................................|debugger-DBGp-todos|
6.  Changelog........................................|debugger-DBGp-changelog|

==============================================================================
2. Installation						*debugger-DBGp-installation* {{{1

Requirements:

- DBGp protocol enabled debugging module. such as xdebug.
- python 2.3+ interface , +sign feature  !!!!!!!!!!!!
  ( < python 2.2 doesn't have socket timeout.)

This file should reside in the plugins directory along with debugger-dbgp.py
and be automatically sourced.

By default, the script expects the debugging engine to connect on port 9000.
You can change this with the g:debuggerPort variable by putting the following
line your vimrc:

  let g:debuggerPort = 10001

where 10001 is the new port number you want the server to connect to.

There are three maximum limits you can set referring to the properties
(variables) returned by the debugging engine.

g:debuggerMaxChildren (default 32): The max number of array or object children
to initially retrieve per variable.
For example:

  let g:debuggerMaxChildren = 64

g:debuggerMaxData (default 1024 bytes): The max amount of variable data to
retrieve.
For example:

  let g:debuggerMaxData = 2048

g:debuggerMaxDepth (default 1): The maximum depth that the debugger engine may
return when sending arrays, hashs or object structures to the IDE.
For example:

  let g:debuggerMaxDepth = 10

Finally, if you use the Mini Buffer Explorer vim plugin, minibufexpl.vim,
running the debugger may mess up your window setup. As a result the script has
support to close and open the explorer when you enter and quit debugging
sessions. To enable this support, add the following line to your vimrc:

  let g:debuggerMiniBufExpl = 1

2.1. Installation notes for PHP

* Please look at http://xdebug.org

* You might want to install the xdebug Firefox / Iceweasel plugin to turn
  debugging on and off.
  https://addons.mozilla.org/de/firefox/addon/3960

==============================================================================
3. Usage	    					*debugger-DBGp-usage* {{{1

Press <F5> and browse php file within 5 seconds. :-)
If you did setup correctly, server will make connection to vim.
[ you can change port by editing last line of debugger.vim ]

all the windows currently opened will be closed and debugger interface will be
shown.

Once in debugging mode:
<F1>  : resizing windows
<F2>  : step into
<F3>  : step over
<F4>  : step out

<F6>  : stop debugging. debugger windows will be closed and windows will be
        restored. ( holy :mksession feature )

<F11> : shows all variables
<F12> : shows variable on current cursor

,e    : evalute expression and display result. cursor is automatically move to
        watch window. type line and just press enter.

command line commands:
:Bp   : toggle breakpoint on current line
:Up   : goto upper level of stack
:Dn   : goto lower level of stack

For a complete tutorial on how to setup this script, please visit:
http://tech.blog.box.net/2007/06/20/how-to-debug-php-with-vim-and-xdebug-on-linux/


==============================================================================
4. Notes	    					*debugger-DBGp-notes* {{{1

* You may see python exception messages. Almost of them occurre when the 
  connection is closed. xdebug dosn't send messages for the last file/line
  information. Just press <F6> to restore the session.

* To use xdebug with multiple clients at the same time, one may need DBGp
  proxy. you may download a MIT licensed(?) version of it from activestate's
  komodo's evalution copy. However this script may need to be changed a little.

* The debugger may work faster, if you turn off syntax highlighting (:syn off).

* commandline client for dbgp
  http://candyscript.com/projects/dbgp/

==============================================================================
5. Todos				    		*debugger-DBGp-todos* {{{1

* Add support for other scripting languages, see:
  * http://docs.activestate.com/komodo/4.4/debugperl.html
  * http://aspn.activestate.com/ASPN/Downloads/Komodo/RemoteDebugging

* Support all features of DBGp.
* Add a status line/window which constantly shows what the current status of
  the debugger is. (starting, break, stopped, etc.)
* Properly document the feature from Ethan McCreadie

==============================================================================
6. Changelog	    					*debugger-DBGp-changelog* {{{1

2008-09-25    Thomas Koch (thkoch2001)    <thomas koch ro>

* Imported Versions from vim.org into GIT
* added vim doc file and copied documentation from web and plugin files
* renamed plugin files to debugger-dbgp
* Renamed pathMap variable to g:debuggerPathMap
* Only execute pathMap code, if g:debuggerPathMap exists

2008-04-25    Ethan McCreadie (ethanm)    <ethanmcc at gmail.com>

* from: http://www.vim.org/scripts/script.php?script_id=2218

* The only thing I added is the ability to set path mapping in your .vimrc (or
  wherever)
  For example:
  let pathMap="/mnt/hgfs:/home/ethanm/vmfiles, /home/config:/home/ethanm/config"
  would adjust my xdebug paths so that I could now work with a local editor on
  files running in my VM.


2007-06-21    Sam Ghods    <sam at box dot net>

* from: http://www.vim.org/scripts/script.php?script_id=1929

* added MIT Licence
* Added a check so the script doesn't load if python is
  not compiled in. (Contributed by Lars Becker.)
* Added vim variable to change port.
* You can now put debugger.py in either runtime directory
  or the home directory.
* Added to ability to change max children, data and depth
  settings.
* Made it so stack_get wouldn't be called if the debugger
  has already stopped.
* Added support for minibufexpl.vim.

2004-12-07    Seung Woo Shin (segv)    <segv at sayclub.com> 

* from: http://www.vim.org/scripts/script.php?script_id=1152

* Initial version without explicit licence information

==============================================================================
Modelines: {{{1
 vim:tw=78:ts=8:ft=help:norl:fdm=marker
